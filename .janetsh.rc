(def ansi-escape "\x1b[")
(def ansi-graphics-end "m")
(def ansi-graphics-struct
     {
      :reset 0	    # All attributes off
      :bold-on 1    # Bold on
      :underscore 4 # Underscore (on monochrome display adapter only)
      :blink-on 5   # Blink on
      :reverse-video 7 # Reverse video on
      :concealed-on 8  # Concealed on
      #Foreground colors
      :fg-black 30 # Black
      :fg-red 31	# Red
      :fg-green 32 # Green
      :fg-yellow 33 # Yellow
      :fg-blue 34	 # Blue
      :fg-magenta 35 # Magenta
      :fg-cyan 36	  # Cyan
      :fg-white 37	  # White
      #Background colors
      :bg-black 40 # Black
      :bg-red 41	# Red
      :bg-green 42 # Green
      :bg-yellow 43 # Yellow
      :bg-blue 44	 # Blue
      :bg-magenta 45 # Magenta
      :bg-cyan 46	  # Cyan
      :bg-white 47	  # White
      }
     )
(def ansi-reset (string ansi-escape (ansi-graphics :reset) ansi-graphics-end))

(defn set-graphics-attr [attr & attrs]
     (let [attr-str (string/join
		     (map (fn [x] (string (ansi-graphics-struct x))) (array/concat @[attr] attrs))
		     ";")]
       (string ansi-escape attr-str ansi-graphics-end)))

(defn set-color [color]
  (set-graphics-attr color))

(defn color-string [s color]
  (string (set-color color) s ansi-reset))

(defn time-str []
  (string "[" ((os/date) :hours)
	  ":" ((os/date) :minutes)
	  ":" ((os/date) :seconds) "]"))

(defn user [] (os/getenv "USER"))
(defn hostname [] (os/getenv "HOSTNAME"))

(set *get-prompt*
     (fn get-prompt [p]
     	 (string (time-str) " [" (user) "@" (hostname) "]" " ["
		 (color-string (os/cwd) :fg-cyan) "]" (parser/state p) "$ ")))





     
